 #include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>

int main(int argc, char * argv[]) {
     pid_t pid_hijo1, pid_hijo2;
     int factorial1 = 1, factorial2 = 1, num = 10;

     printf("El pid del programa principal es: %d\n", (int)getpid());
     pid_hijo1 = fork();

     switch(pid_hijo1)
     {
      case -1:
        printf("Error al crear el proceso hijo1");
        return -1;
      case 0:
        printf("Proceso hijo 1 creado, PID:%d\n", (int)pid_hijo1);
        for(int i = 1; i < num; i++){
          factorial1 = factorial1 * i;
           printf("Hijo 1: fact[%d] : %d\n", i, factorial1);
     }
        return 0;
      break;
      default:
        printf("Proceso padre: Proceso hijo 1 creado, PID:%d\n", (int)pid_hijo1);
     }
    wait(NULL);
     pid_hijo2 = fork();
     switch(pid_hijo2)
     {
      case -1:
        printf("Error al crear el proceso hijo2");
        return -1;
      case 0:
        printf("Proceso hijo 2 creado, PID:%d\n", (int)pid_hijo2);
        for(int i = 1; i < num; i++){
          factorial2 = factorial2 * i;
          printf("Hijo 2: fact[%d] : %d\n", i, factorial2);
        }
        return 0;
      break;
      default:
        printf("Proceso padre: Proceso hijo 2 creado, PID:%d\n", (int)pid_hijo2);
     }
     wait(NULL);
     /*Esta linea sera ejecutada por ambos procesos (padre e hijo)*/
     printf("Fin del proceso padre: %d", (int)getpid());
     exit(EXIT_SUCCESS);
  return 0;
}
